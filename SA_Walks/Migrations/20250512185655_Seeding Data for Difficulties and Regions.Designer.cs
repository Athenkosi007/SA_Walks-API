// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SA_Walks.API.Data;

#nullable disable

namespace SA_Walks.API.Migrations
{
    [DbContext(typeof(SA_WalksDbContext))]
    [Migration("20250512185655_Seeding Data for Difficulties and Regions")]
    partial class SeedingDataforDifficultiesandRegions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SA_Walks.API.Models.Domain.Difficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb0df157-43ac-4a7a-9cc1-d5fdfe50236b"),
                            Name = "Easy"
                        },
                        new
                        {
                            Id = new Guid("78d9fb01-25b7-494c-8d4b-6c389e1b1e33"),
                            Name = "Medium"
                        },
                        new
                        {
                            Id = new Guid("f5241c79-fea3-4330-b7c3-2a293330be89"),
                            Name = "Hard"
                        });
                });

            modelBuilder.Entity("SA_Walks.API.Models.Domain.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("52757937-a2e0-46bc-bbca-8cc05a9672ba"),
                            Code = "EC",
                            Name = "Eastern Cape",
                            RegionImageUrl = "https://www.southaustralia.com/globalassets/regions/sa/sa-region.jpg"
                        },
                        new
                        {
                            Id = new Guid("7fdc10db-d19b-4190-8573-64ce42cf401a"),
                            Code = "GP",
                            Name = "Western Cape",
                            RegionImageUrl = "https://www.southaustralia.com/globalassets/regions/sa/sa-region.jpg"
                        },
                        new
                        {
                            Id = new Guid("97fbee3a-a04d-4ab6-ba5e-54c0ce39ebfe"),
                            Code = "MPA",
                            Name = "Mpumalanga",
                            RegionImageUrl = "https://www.southaustralia.com/globalassets/regions/sa/sa-region.jpg"
                        },
                        new
                        {
                            Id = new Guid("9f36b0fd-e93a-418a-84c9-d6bd773ee215"),
                            Code = "KZN",
                            Name = "KwaZulu-Natal",
                            RegionImageUrl = "https://www.southaustralia.com/globalassets/regions/sa/sa-region.jpg"
                        },
                        new
                        {
                            Id = new Guid("1bb825d9-f26f-4c5c-a319-030a55aec9fc"),
                            Code = "FS",
                            Name = "Free State"
                        },
                        new
                        {
                            Id = new Guid("1dceacbf-1d64-4fb7-a45b-daeb1505ece4"),
                            Code = "L",
                            Name = "Limpopo"
                        });
                });

            modelBuilder.Entity("SA_Walks.API.Models.Domain.Walk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DifficultyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("LengthInKm")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WalkImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Walks");
                });
#pragma warning restore 612, 618
        }
    }
}
